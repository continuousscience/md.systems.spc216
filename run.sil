-- A compound program consisting of 2 subprograms.
prog = do ST
  gmx_like()
  spc216 := lmp.newDatum(spc216)
  lmp.read_data(spc216)
  andersen(300.0)
  shake()
  lmp.run(100)

-- Saves the final state of the program as immutable data.
out = runST(lmp.open(3), prog)[1]

-- Continue last run for another 100 steps.
-- out and out2 are now 2 different, immutable
-- LAMMPS output states (representing 2 different times)
out2 = runST(out, lmp.run(100))[1]

-- Do a simple test here.
atoms = lmp.get_natoms( out2 )

∙ = lmp.command -- function to run a lammps command

-- Sub-programs consisting of lots of lmp.command calls:
gmx_like = do ST
  ∙ "boundary p p p"
  ∙ "units real"
  ∙ "atom_style full"
  ∙ "neighbor 2.0 bin"
  ∙ "neigh_modify delay 5"
  ∙ "pair_style lj/charmm/coul/long 8.0 8.5"
  ∙ "kspace_style ewald 1e-5"
  ∙ "pair_modify mix arithmetic"
  ∙ "bond_style harmonic"
  ∙ "angle_style harmonic"
  ∙ "special_bonds lj/coul 0 0 1"
 
andersen = fun Float temp -> do ST
  ∙ "velocity all create 300.0 39856"
  ∙ "fix mdnvt all nvt temp 300.0 300.0 10.0"
  ∙ "fix andr all temp/rescale 200 300.0 300.0 0.02 1.0"
  ∙ "thermo_style    custom step temp press etotal"
  ∙ "thermo 50"
  ∙ "timestep 0.001"

shake = do ST
  spc_wat := lmp.newDatum(spc_wat)
  lmp.molecule("spc_wat", spc_wat, "")
  ∙ "fix shaker all shake 0.0001 20 100 b 1 a 1 mol spc_wat"

rdf = do ST
  ∙ "compute rdf1 all rdf 500 1 1 1 2* 2* 2*"
  ∙ "fix rdf_file all ave/time 100 1 100 c_rdf1[*] file tmp.rdf mode vector"

